#!/bin/bash
#
#   Copyright <YEAR> Amazon.com, Inc. and its affiliates. All Rights Reserved.
#  
#   Licensed under the MIT License. 
#  Copyright 2017 Amazon.com, Inc. and its affiliates

# Permission is hereby granted, free of charge, to any person obtaining a copy of 
# this software and associated documentation files (the "Software"), to deal in 
# the Software without restriction, including without limitation the rights to 
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
# of the Software, and to permit persons to whom the Software is furnished to do 
# so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in 
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR 
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
# OTHER DEALINGS IN THE SOFTWARE.

#  
#
#
# OCF resource agent to move an IP address within a VPC in the AWS
# Written by Stefan Schneider , Martin Tegmeier (AWS)
# Based on code of Markus Guertler
#
# Jan. 27, 2017, vers 0.2.1

###############################################################################
# For testing purposes delete OCF_ROOT after testing
OCF_ROOT=/usr/lib/ocf/
#
# INIT
#: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/resource.d/heartbeat}
#if [ -f ${OCF_FUNCTIONS_DIR}/.ocf-shellfuncs ]; then
#  . ${OCF_FUNCTIONS_DIR}/.ocf-shellfuncs
#fi

#######################################################################
# Initialization:

: ${OCF_FUNCTIONS=${OCF_ROOT}/resource.d/heartbeat/.ocf-shellfuncs}
. ${OCF_FUNCTIONS}
: ${__OCF_ACTION=$1}

#######################################################################

 
USAGE="usage: $0 {start|stop|status|meta-data}";
###############################################################################


###############################################################################
#
# Functions
#
###############################################################################


metadata() {
cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="aws-vpc-route53">
<version>2.0</version>
<longdesc lang="en">
Resource Agent to update Route53 of the Amazon Webservices EC2
by changing an entry in a hostse zone id
</longdesc>
<shortdesc lang="en">Update Route53 of the AWS EC2</shortdesc>
<parameters>
<parameter name="hostedzoneid" required="1">
<longdesc lang="en">
AWS hosted zone ID for Route 53
</longdesc>
<shortdesc lang="en">aws hosted zone ID</shortdesc>
<content type="string" default="" />
</parameter>
<parameter name="fullname" required="1">
<longdesc lang="en">
full name of system including all domain information
</longdesc>
<shortdesc lang="en">the name of the service ip</shortdesc>
<content type="string" default="" />
</parameter>
<parameter name="ttl" required="1">
<longdesc lang="en">
TTL: time to life vor Route53
</longdesc>
<shortdesc lang="en">time to life</shortdesc>
<content type="string" default="10" />
</parameter>
<parameter name="profile" required="1">
<longdesc lang="en">
AWS profile needed for the cluster
</longdesc>
<shortdesc lang="en">AWS profile</shortdesc>
<content type="string" default="" />
</parameter>
</parameters>
<actions>
<action name="start" timeout="180" />
<action name="stop" timeout="180" />
<action name="monitor" depth="0" timeout="180" interval="300" />
<action name="validate-all" timeout="5" />
<action name="meta-data" timeout="5" />
</actions>
</resource-agent>
END
}

debugger() {
	ocf_log info "DEBUG: $1"
}

ec2ip_validate() {
	debugger "function: validate"
	
	# Full name
	[[ -z "$OCF_RESKEY_fullname" ]] && ocf_log error "Full name parameter not set $OCF_RESKEY_fullname!" && exit $OCF_ERR_CONFIGURED
	
	# Hosted Zone ID
	[[ -z "$OCF_RESKEY_hostedzoneid" ]] && ocf_log error "Hosted Zone ID parameter not set $OCF_RESKEY_hostedzoneid!" && exit $OCF_ERR_CONFIGURED
	
	# profile
	[[ -z "$OCF_RESKEY_profile" ]] && ocf_log error "AWS CLI profile not set $OCF_RESKEY_profile!" && exit $OCF_ERR_CONFIGURED
	
	# TTL
	[[ -z "$OCF_RESKEY_ttl" ]] && ocf_log error "TTL not set $OCF_RESKEY_ttl!" && exit $OCF_ERR_CONFIGURED
	
	debugger "Testing aws command"
	aws --version 2>&1
	if [ "$?" -gt 0 ]; then
		error "Error while executing aws command as user root! Please check if AWS CLI tools (Python flavor) are properly installed and configured." && exit $OCF_ERR_INSTALLED
	fi
	debugger "ok"
		
	EC2_INSTANCE_ID=$(ec2metadata --instance-id)
	
	if [ -n "$OCF_RESKEY_profile" ]; then
		AWS_PROFILE_OPT="--profile $OCF_RESKEY_profile"
	else
               AWS_PROFILE_OPT="--profile default"
	fi
	
	return $OCF_SUCCESS
}

ec2ip_monitor() {
	ec2ip_validate
	debugger "function: ec2ip_monitor: check Route53 record "
	IPADDRESS="$(ec2metadata aws ip | grep local-ipv4 | awk '{ print $2 }')"
	ARECORD="$(aws $AWS_PROFILE_OPT route53 list-resource-record-sets --hosted-zone-id $OCF_RESKEY_hostedzoneid --query "ResourceRecordSets[?Name=='$OCF_RESKEY_fullname']" | grep RESOURCERECORDS | /usr/bin/awk '{ print $2 }' )"
	debugger "function: ec2ip_monitor: found IP address: $ARECORD ."
	if [ "${ARECORD}" == "${IPADDRESS}" ]; then 
		debugger "function: ec2ip_monitor:  ARECORD $ARECORD found"
 		return $OCF_SUCCESS
	else
		debugger "function: ec2ip_monitor: no ARECORD found"
		return $OCF_NOT_RUNNING
	fi
	
	return $OCF_SUCCESS	
}

ec2ip_stop() {
	ocf_log info "EC2: Bringing down Route53 agent. (Will do nothing)"
	ocf_log info "EC2: Bringing down Route53 agent. (Will remove ARECORD)"
	IPADDRESS="$(ec2metadata aws ip | grep local-ipv4 | awk '{ print $2 }')"
        ARECORD="$(aws $AWS_PROFILE_OPT route53 list-resource-record-sets --hosted-zone-id $OCF_RESKEY_hostedzoneid --query "ResourceRecordSets[?Name=='$OCF_RESKEY_fullname']" | grep RESOURCERECORDS | /usr/bin/awk '{ print $2 }' )"
        debugger "function: ec2ip_monitor: found IP address: $ARECORD ."
        if [ ${ARECORD} != ${IPADDRESS} ]; then
                debugger "function: ec2ip_monitor: no ARECORD found"
                return $OCF_SUCCESS
        else
                debugger "function: ec2ip_monitor:  ARECORD $ARECORD found"
		# determine IP address
        	IPADDRESS="$(ec2metadata aws ip | grep local-ipv4 | awk '{ print $2 }')"
        	# Patch file
        	debugger "function ec2ip_stop: will delete IP address to ${IPADDRESS}"
        	ocf_log info "EC2: Updating Route53 $OCF_RESKEY_hostedzoneid with $IPADDRESS for $OCF_RESKEY_fullname"
        	ROUTE53RECORD="/var/tmp/route53-${OCF_RESKEY_hostedzoneid}-${IPADDRESS}.json"
        	echo "{ " > ${ROUTE53RECORD}
        	echo "    \"Comment\": \"Update record to reflect new IP address for a system \", " >>  ${ROUTE53RECORD}
        	echo "    \"Changes\": [ " >>  ${ROUTE53RECORD}
        	echo "        { " >>  ${ROUTE53RECORD}
        	echo "            \"Action\": \"DELETE\", " >>  ${ROUTE53RECORD}
        	echo "            \"ResourceRecordSet\": { " >>  ${ROUTE53RECORD}
        	echo "                \"Name\": \"${OCF_RESKEY_fullname}\", " >>  ${ROUTE53RECORD}
        	echo "                \"Type\": \"A\", " >>  ${ROUTE53RECORD}
        	echo "                \"TTL\": ${OCF_RESKEY_ttl}, " >>  ${ROUTE53RECORD}
        	echo "                \"ResourceRecords\": [ " >>  ${ROUTE53RECORD}
        	echo "                    { " >>  ${ROUTE53RECORD}
        	echo "                        \"Value\": \"${IPADDRESS}\" " >>  ${ROUTE53RECORD}
        	echo "                    } " >>  ${ROUTE53RECORD}
        	echo "                ] " >>  ${ROUTE53RECORD}
        	echo "            } " >>  ${ROUTE53RECORD}
        	echo "        } " >>  ${ROUTE53RECORD}
        	echo "    ] " >>  ${ROUTE53RECORD}
        	echo "}" >> ${ROUTE53RECORD}
        	cmd="aws --profile ${OCF_RESKEY_profile} route53 change-resource-record-sets --hosted-zone-id ${OCF_RESKEY_hostedzoneid} \
        	  --change-batch file://${ROUTE53RECORD} "
        	debugger "function ec2ip_start: executing command: $cmd"
        	CHANGEID=$($cmd | grep CHANGEINFO |  awk -F'\t' '{ print $3 }' )
        	debugger "Change id: ${CHANGEID}"
        	rm ${ROUTE53RECORD}
        	CHANGEID=$(echo $CHANGEID |cut -d'/' -f 3 |cut -d'"' -f 1 )
        	debugger "Change id: ${CHANGEID}"
        	STATUS="PENDING"
        	MYSECONDS=2
        	while [ "$STATUS" = 'PENDING' ]; do
       	         sleep  ${MYSECONDS}
       	         STATUS="$(aws --profile ${OCF_RESKEY_profile} route53 get-change --id $CHANGEID | grep CHANGEINFO |  awk -F'\t' '{ print $4 }' |cut -d'"' -f 2 )"
       	         debugger "Waited for ${MYSECONDS} seconds and checked execution of Route 53 update status: ${STATUS} "
        	done

                return $OCF_SUCCESS
        fi

	return $OCF_SUCCESS
}

ec2ip_start() {
	# determine IP address
	IPADDRESS="$(ec2metadata aws ip | grep local-ipv4 | awk '{ print $2 }')"
	# Patch file
	debugger "function ec2ip_start: will update IP address to ${IPADDRESS}"
	ocf_log info "EC2: Updating Route53 $OCF_RESKEY_hostedzoneid with $IPADDRESS for $OCF_RESKEY_fullname"
	ROUTE53RECORD="/var/tmp/route53-${OCF_RESKEY_hostedzoneid}-${IPADDRESS}.json"
	echo "{ " > ${ROUTE53RECORD}
	echo "    \"Comment\": \"Update record to reflect new IP address for a system \", " >>  ${ROUTE53RECORD}
	echo "    \"Changes\": [ " >>  ${ROUTE53RECORD}
	echo "        { " >>  ${ROUTE53RECORD}
	echo "            \"Action\": \"UPSERT\", " >>  ${ROUTE53RECORD}
	echo "            \"ResourceRecordSet\": { " >>  ${ROUTE53RECORD}
	echo "                \"Name\": \"${OCF_RESKEY_fullname}\", " >>  ${ROUTE53RECORD}
	echo "                \"Type\": \"A\", " >>  ${ROUTE53RECORD}
	echo "                \"TTL\": ${OCF_RESKEY_ttl} , " >>  ${ROUTE53RECORD}
	echo "                \"ResourceRecords\": [ " >>  ${ROUTE53RECORD}
	echo "                    { " >>  ${ROUTE53RECORD}
	echo "                        \"Value\": \"${IPADDRESS}\" " >>  ${ROUTE53RECORD}
	echo "                    } " >>  ${ROUTE53RECORD}
	echo "                ] " >>  ${ROUTE53RECORD}
	echo "            } " >>  ${ROUTE53RECORD}
	echo "        } " >>  ${ROUTE53RECORD}
	echo "    ] " >>  ${ROUTE53RECORD}
	echo "}" >> ${ROUTE53RECORD}
	cmd="aws --profile ${OCF_RESKEY_profile} route53 change-resource-record-sets --hosted-zone-id ${OCF_RESKEY_hostedzoneid} \
	  --change-batch file://${ROUTE53RECORD} "
        debugger "function ec2ip_start: executing command: $cmd"
	CHANGEID=$($cmd | grep CHANGEINFO |  awk -F'\t' '{ print $3 }' )
	#CHANGEID="$(aws $AWS_PROFILE_OPT route53 change-resource-record-sets --hosted-zone-id ${OCF_RESKEY_hostedzoneid} \
	#  --change-batch file://${ROUTE53RECORD} | grep Id |  awk '{ print $2 }' )"
        debugger "Change id: ${CHANGEID}"
	rm ${ROUTE53RECORD}
	CHANGEID=$(echo $CHANGEID |cut -d'/' -f 3 |cut -d'"' -f 1 )
        debugger "Change id: ${CHANGEID}"
	STATUS="PENDING"
	MYSECONDS=2
	while [ "$STATUS" = 'PENDING' ]; do
     	   	sleep  ${MYSECONDS}
         	STATUS="$(aws --profile ${OCF_RESKEY_profile} route53 get-change --id $CHANGEID | grep CHANGEINFO |  awk -F'\t' '{ print $4 }' |cut -d'"' -f 2 )"
		debugger "Waited for ${MYSECONDS} seconds and checked execution of Route 53 update status: ${STATUS} "
	done

	return $OCF_SUCCESS
}

###############################################################################
#
# MAIN
#
###############################################################################

case $__OCF_ACTION in 
	meta-data) metadata
		   exit $OCF_SUCCESS;;
	monitor)
		ec2ip_monitor;;
	stop)
		ec2ip_stop;;
	validate-all) ec2ip_validate;;
	start)
		ec2ip_start;;
	*)	exit $OCF_ERR_UNIMPLEMENTED;;
esac
